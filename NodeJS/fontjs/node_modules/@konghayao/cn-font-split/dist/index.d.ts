import { FontEditor } from "fonteditor-core";
import fse from "fs-extra";
export declare type InputTemplate = {
    /** 字体文件的相对地址 */
    FontPath: string;
    /** 切割后字体 */
    destFold: string;
    /** 生成后的 CSS 文件的信息 */
    css?: Partial<{
        fontFamily: string;
        fontWeight: number | string;
        fontStyle: string;
        fontDisplay: string;
    }>;
    /** 输入的字体类型 */
    fontType?: FontEditor.FontType;
    /** 输出的字体类型，默认 ttf；woff，woff2 也可以*/
    targetType?: FontEditor.FontType;
    /** 预计每个包的大小，插件会尽量打包到这个大小  */
    chunkSize?: number;
    /** 输出的 css 文件的名称  */
    cssFileName?: string;
    /** 是否输出 HTML 测试文件  */
    testHTML?: boolean;
    /** 是否输出报告文件  */
    reporter?: boolean;
    /** 是否输出预览图 */
    previewImage?: {
        /** 图中需要显示的文本 */
        text?: string;
        /** 预览图的文件名，不用带后缀名 */
        name?: string;
    };
    /** 日志输出 */
    log?: (...args: any[]) => void;
    /** 输出文件的方式 */
    outputFile?: (file: string, data: any, options?: string | fse.WriteFileOptions | undefined) => Promise<void>;
};
declare function fontSplit({ FontPath, destFold, css, fontType, targetType, cssFileName, // 生成 CSS 文件的名称
chunkSize, testHTML, reporter, previewImage, log, outputFile, }: InputTemplate): Promise<void>;
export { fontSplit };
export default fontSplit;
