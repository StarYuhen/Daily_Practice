"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.createImageForFont = exports.woff2ToTTF = void 0;
const path_1 = __importDefault(require("path"));
const imagescript_1 = require("imagescript");
const default_1 = require("./default");
const woff2ToTTF = async (font) => {
    const { default: woff2Rs } = await Promise.resolve().then(() => __importStar(require("@woff2/woff2-rs")));
    return woff2Rs.decode(font); // output TTF buffer
};
exports.woff2ToTTF = woff2ToTTF;
const createImageForFont = async (buffer, type, destFold, { text = "中文网字计划\nThe Project For Web", name = "preview", outputFile = default_1.defaultOutputFile, }) => {
    if (type !== "ttf") {
        buffer = await (0, exports.woff2ToTTF)(buffer);
    }
    const Font = await imagescript_1.Image.renderText(buffer, 128, text);
    const encoded = await Font.encode(1, {
        creationTime: Date.now(),
        software: "中文网字计划",
        author: "江夏尧",
        description: "中文网字计划 切割字体预览图",
    });
    await outputFile(path_1.default.join(destFold, "preview" + ".png"), encoded);
};
exports.createImageForFont = createImageForFont;
